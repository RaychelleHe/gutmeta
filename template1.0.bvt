svg{
    //x = 10
    //y = 10
    height=500
    width=800
    // 深度信息图
    // 原始基因片段图
    // 基因方块
    Component{
		@let n = 100
		@let seg_depth = [[0,53],[1,59],[2,58],[3,62]]
        // @let seg_info = [{"name":"SEG1","length":190,"source":"1-3000"},{"name":"SEG2","length":200,"source":"3001-5000"}]
        @let map = @colorMap(5,["#0ac492","#ffff80","#8585e0","#ff6666","#3a91a5"]) // ** 22 = seg_info.length
     	@let geneW = 30 // 方块大小
        @let margin = 20
        @let clicked = (d,i)=>{
            checked.value[i] = d
            console.log("jjj")}
        width = geneW*22
        x = 40
        y = 40
        Text(checked.value[0]+""){}
        // 0.true scale
        Component{
            height = geneW
            wdith = 100%
            // Axis("top"){}
            xScale = @scaleLinear(start,end)
            @for (d,i) in newSegInfo{
                Rect{
                    x = @scaledX(d.start)
                    width = @scaledX(d.length)
                    height = 100%
                    fill = map.get(i%5)
                    stage:active {
                        stroke = "red"
                        fillOpacity=0.4
                        // checked = "active"
                    }
                    stage = checked.value[i]
                    on:mouseenter = ((ev,el)=>{
                        el.stage = "active"
                        checked.value[i] = "active"
                        el.$parent.redraw()
                        })
                    on:mouseleave = ((ev,el)=>{
                        el.stage = null
                        checked.value[i] = null
                        el.$parent.redraw()})
                    on:click = window.alert("Clicked")
                    stroke = "black"
                }
                Text.centered{text=i+1;x=@scaledX(d.start+d.end)/2;y=geneW/2;}
                Text{
                    y = -5
                    x = @scaledX(d.start)
                    rotation = @rotate(-45)
                    text = d.start
                }
                Text{
                    y = -5
                    x = @scaledX(d.end)
                    rotation = @rotate(-45)
                    text = d.end
                }
                // left line
                Line{
                    x1 = @scaledX(d.start);x2 = i*geneW;y1=geneW;y2 = geneW+margin/2;
                }
                Line{
                    x1 = i*geneW;x2 = i*geneW;y1=geneW+margin/2;y2 = 3*geneW+margin;
                }
                // right line
                Line{
                    x1 = @scaledX(d.end);x2 = (i+1)*geneW;y1=geneW;y2 = geneW+margin/2;
                }
                Line{
                    x1 = (i+1)*geneW;x2 = (i+1)*geneW;y1=geneW+margin/2;y2 = 3*geneW+margin;
                }
            }
        }
        // 1.depth
		Component{
            y = geneW+margin
		    width = geneW*22
		    height = 2*geneW
		    // x = 40
		    // @let t1 = [[53,56,53],[54,67,63]]
            Axis {
                    y = 100%
                    height = -50
                    orientation = "left"
                    yScale = @scaleLinear(0, 70) // **70
            }
            @for (d,i) in depth{
                XYPlot {
                    x = i*geneW
                    valueRange = [0,70] // need be edited
                    index = i
                    height = 100%
                    width = geneW
                    @let t1 = {y1:d.points}
                    data = t1
                    stackedData = {stacked: ['y1']}
                    hasPadding = false
                    StackedArea {
                        data = "stacked"
                        :children (data) {
                            Path {
                                d = data.path
                                fill = "#e63e8f"
                            }
                        }
                    }
                    Line {
                        behavior:tooltip {
                            content = "average-depth:"+d.avg
                        }
                        y1=70-d.avg;y2=70-d.avg;x2 = geneW;stroke="blue";strokeWidth = 2
                    }
                }
            }
        }
		// 2.original SEG block
        Component{
			y = 3*geneW+margin
            @for (seg,i) in newSegInfo {
                // 方块
                Rect{
                    x=i*geneW;width=geneW;height=geneW;fill=map.get(i%5);stroke="black"
                    stage:active {
                        stroke = "red"
                        fillOpacity=0.4
                        // checked = "active"
                    }
                    stage = checked.value[i]
                    on:mouseenter = ((ev,el)=>{
                        el.stage = "active"
                        checked.value[i] = "active"
                        el.$parent.redraw()
                        })
                    on:mouseleave = ((ev,el)=>{
                        el.stage = null
                        checked.value[i] = null
                        el.$parent.redraw()
                    })
                    on:click = window.alert("Clicked")
                }
                // 文字 原子组件内不允许创建子组件
                Text.centered{text=i+1;x=i*geneW+geneW/2;y=geneW/2;}
            }
        }
        // 3.new gene SEG
        Component{
            y = 4*geneW+2*margin
            @let pointX = 0
            @let pointY = 0
            @let preNum = 0 // previous SEG number
            @let preDirection = '+'
            @let changeDirection = false
            @for (seg,i) in segSequence{  
            	Container{
                    @expr changeDirection = preDirection!=seg.direction
                    @if seg.type=="SEG" && preDirection=="+"{
                        @if !changeDirection && seg.num>=preNum+1 {
                            Line{x1=pointX;x2=(seg.num-1)*geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Container{
                                @let r = (seg.num-1)%5  
                                Rect{x=(seg.num-1)*geneW;y=pointY;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+0.5*geneW;
                            }
                            // reset position point and preNum
                            Container{
                                @expr pointX=seg.num*geneW
                                @expr preNum=seg.num
                            }
                            Container{
                                x=(preNum-1)*geneW;
                                y=pointY+geneW*0.75;
                                Line{x2=geneW*0.8}
                                Triangle{x=geneW*0.75;y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="right";fill="black"}
                            }    
                        }
                        @elsif !changeDirection && seg.num<=preNum {
                            Line{x1=pointX;x2=pointX+geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Container{
                                x=pointX+geneW
                                y=pointY+geneW
                                ArcLine{dashArray = "2,2";r=geneW/2;x1=0;x2=180;}   
                            }             
                            Line{x1=pointX+geneW;x2=(seg.num-1)*geneW;y1=pointY+geneW*1.5;y2=pointY+geneW*1.5;dashArray = "2,2";}
                            Container{
                                x=(seg.num-1)*geneW
                                y=pointY+2*geneW
                                ArcLine{dashArray = "2,2";x1=180;x2=360;r=geneW/2;}
                            }
                            Container{
                                @let r = (seg.num-1)%5  
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=seg.num*geneW
                                @expr pointY=pointY+2*geneW
                                @expr preNum=seg.num
                            }
                            Container{
                                x=(preNum-1)*geneW;
                                y=pointY+geneW*0.75;
                                Line{x2=geneW*0.8}
                                Triangle{x=geneW*0.75;y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="right";fill="black"}
                            }   
                        }
                        @elsif changeDirection && seg.num>=preNum+1 { 
                            Line{x1=pointX;x2=seg.num*geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Container{
                                x=seg.num*geneW
                                y=pointY+1.5*geneW
                                ArcLine{x1=0;x2=180;r=geneW;dashArray = "2,2";}
                            }
                            Container{
                                @let r = (seg.num-1)%5 
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=(seg.num-1)*geneW
                                @expr pointY=pointY+geneW*2
                                @expr preNum=seg.num
                            }
                            Container{
                                x=pointX;
                                y=pointY+geneW*0.75;
                                Line{x1=0.2*geneW;x2=geneW}
                                Triangle{y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="left";fill="black"}
                            }   
                        }
                        @else{
                            Container{
                                x=pointX;
                                y=pointY+1.5*geneW;
                                ArcLine{x1=0;x2=180;r=geneW;dashArray = "2,2";}
                            }
                            Line{x1=pointX;x2=seg.num*geneW;y1=pointY+2.5*geneW;y2=y1=pointY+2.5*geneW;dashArray = "2,2";}
                            Container{
                                @let r = (seg.num-1)%5 
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=(seg.num-1)*geneW
                                @expr pointY=pointY+2*geneW
                                @expr preNum=seg.num
                            }
                           Container{
                                x=pointX;
                                y=pointY+geneW*0.75;
                                Line{x1=0.2*geneW;x2=geneW}
                                Triangle{y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="left";fill="black"}
                            }   
                        }
                        Container{
                            @expr preDirection=seg.direction
                        }
                    }
                    @elsif seg.type=="SEG" && preDirection=="-"{
                        @if !changeDirection && seg.num<=preNum-1 {
                            Line{x1=pointX;x2=seg.num*geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Component{
                                @let r = (seg.num-1)%5 
                                Rect{x=(seg.num-1)*geneW;y=pointY;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+0.5*geneW;
                            }
                            // reset position point and preNum
                            Container{
                                @expr pointX=(seg.num-1)*geneW
                                @expr preNum=seg.num
                            }
                            Container{
                                x=pointX;
                                y=pointY+geneW*0.75;
                                Line{x1=0.2*geneW;x2=geneW}
                                Triangle{y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="left";fill="black"}
                            }   
                        }
                        @elsif !changeDirection && seg.num>=preNum {
                            Line{x1=pointX;x2=pointX-geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Container{
                                x=pointX-geneW
                                y=pointY+geneW
                                ArcLine{dashArray = "2,2";r=geneW/2;x1=180;x2=360;}   
                            }             
                            Line{x1=pointX-geneW;x2=seg.num*geneW;y1=pointY+geneW*1.5;y2=pointY+geneW*1.5;dashArray = "2,2";}
                            Container{
                                x=seg.num*geneW
                                y=pointY+2*geneW
                                ArcLine{dashArray = "2,2";x1=0;x2=180;r=geneW/2;}
                            }
                            Container{
                                @let r = (seg.num-1)%5
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=seg.num*geneW
                                @expr pointY=pointY+2*geneW
                                @expr preNum=seg.num
                            }
                            Container{
                                x=pointX;
                                y=pointY+geneW*0.75;
                                Line{x1=0.2*geneW;x2=geneW}
                                Triangle{y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="left";fill="black"}
                            }     
                        }
                        @elsif changeDirection && seg.num<=preNum-1 { 
                            Line{x1=pointX;x2=(seg.num-1)*geneW;y1=pointY+geneW/2;y2=pointY+geneW/2;dashArray = "2,2";}
                            Container{
                                x=(seg.num-1)*geneW
                                y=pointY+1.5*geneW
                                ArcLine{x1=180;x2=360;r=geneW;dashArray = "2,2";}
                            }
                            Container{
                                @let r = (seg.num-1)%5  
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"}
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=seg.num*geneW
                                @expr pointY=pointY+geneW*2
                                @expr preNum=seg.num
                            }
                            Container{
                                x=(preNum-1)*geneW;
                                y=pointY+geneW*0.75;
                                Line{x2=geneW*0.8}
                                Triangle{x=geneW*0.75;y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="right";fill="black"}
                            }   
                        }
                        @else{
                            Container{
                                x=pointX;
                                y=pointY+1.5*geneW;
                                ArcLine{x1=180;x2=360;r=geneW;dashArray = "2,2";}
                            }
                            Line{x1=pointX;x2=(seg.num-1)*geneW;y1=pointY+2.5*geneW;y2=y1=pointY+2.5*geneW;dashArray = "2,2";}
                            Container{
                                @let r = (seg.num-1)%5 
                                Rect{x=(seg.num-1)*geneW;y=pointY+2*geneW;width=geneW;height=geneW;fill=map.get(r);stroke="black"} 
                            }
                            Text.centered{text=seg.num;x=seg.num*geneW-0.5*geneW;y=pointY+2.5*geneW;}
                            Container{
                                @expr pointX=seg.num*geneW
                                @expr pointY=pointY+2*geneW
                                @expr preNum=seg.num
                            }
                            Container{
                                x=(preNum-1)*geneW;
                                y=pointY+geneW*0.75;
                                Line{x2=geneW*0.8}
                                Triangle{x=geneW*0.75;y=-0.1*geneW;width=geneW*0.2;height=0.2*geneW;orientation="right";fill="black"}
                            }     
                            
                        }
                        Container{
                            @expr preDirection=seg.direction
                        }
                    }
                    @else{
                    // 插入基因片，三角标记
                        Triangle {
                            x=pointX-0.5*geneW
                            y=pointY-0.25*geneW
                            width = geneW; height = 0.25*geneW;
                            orientation = "bottom"
                        }
                        Text.centered{
                            x=pointX
                            y=pointY-0.5*geneW
                            text = "INS"+seg.num
                        }
                    }
                }
            }
       }
    }
}
